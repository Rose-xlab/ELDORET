generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String
  email             String              @unique
  password          String
  image             String?
  createdAt         DateTime            @default(now())
  role              UserRole            @default(USER)
  Blog              Blog[]
  comments          Comment[]
  reactions         CommentReaction[]
  commentReplies    CommentReply[]
  submittedEvidence Evidence[]
  verifiedEvidence  Evidence[]          @relation("EvidenceVerifier")
  reported          InstitutionRating[]
  nominated         NomineeRating[]
  createdScandals   Scandal[]
}

model Nominee {
  id            Int                  @id @default(autoincrement())
  name          String
  positionId    Int
  institutionId Int
  districtId    Int
  image         String?
  status        Boolean              @default(false)
  evidence      String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  overallRank   Int?
  comments      Comment[]
  evidences     Evidence[]
  district      District             @relation(fields: [districtId], references: [id])
  institution   Institution          @relation(fields: [institutionId], references: [id])
  position      Position             @relation(fields: [positionId], references: [id])
  rankHistory   NomineeRankHistory[]
  rating        NomineeRating[]
  scandals      Scandal[]
}

model Position {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    Boolean   @default(true)
  nominees  Nominee[]
}

model Institution {
  id          Int                      @id @default(autoincrement())
  name        String
  image       String?
  status      Boolean                  @default(false)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  overallRank Int?
  comments    Comment[]
  evidences   Evidence[]
  rankHistory InstitutionRankHistory[]
  rating      InstitutionRating[]
  nominees    Nominee[]
  scandals    Scandal[]
}

model District {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  region    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    Boolean   @default(true)
  nominees  Nominee[]
}

model NomineeRating {
  id               Int            @id @default(autoincrement())
  userId           Int
  nomineeId        Int
  ratingCategoryId Int
  score            Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  categoryRank     Int?
  comment          String?
  nominee          Nominee        @relation(fields: [nomineeId], references: [id])
  ratingCategory   RatingCategory @relation(fields: [ratingCategoryId], references: [id])
  user             User           @relation(fields: [userId], references: [id])
}

model InstitutionRating {
  id               Int                       @id @default(autoincrement())
  userId           Int
  institutionId    Int
  ratingCategoryId Int
  score            Int
  comment          String?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  categoryRank     Int?
  institution      Institution               @relation(fields: [institutionId], references: [id])
  ratingCategory   InstitutionRatingCategory @relation(fields: [ratingCategoryId], references: [id])
  user             User                      @relation(fields: [userId], references: [id])
}

model Department {
  id                        Int                         @id @default(autoincrement())
  name                      String
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  status                    Boolean                     @default(true)
  Blog                      Blog[]
  InstitutionRatingCategory InstitutionRatingCategory[] @relation("DepartmentToInstitutionRatingCategory")
  categories                RatingCategory[]            @relation("DepartmentToRatingCategory")
}

model ImpactArea {
  id                        Int                         @id @default(autoincrement())
  name                      String
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  status                    Boolean                     @default(true)
  InstitutionRatingCategory InstitutionRatingCategory[] @relation("ImpactAreaToInstitutionRatingCategory")
  categories                RatingCategory[]            @relation("ImpactAreaToRatingCategory")
}

model RatingCategory {
  id            Int                  @id @default(autoincrement())
  keyword       String               @unique
  name          String
  icon          String
  description   String
  weight        Int
  examples      String[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  status        Boolean              @default(true)
  rankHistory   NomineeRankHistory[]
  NomineeRating NomineeRating[]
  departments   Department[]         @relation("DepartmentToRatingCategory")
  impactAreas   ImpactArea[]         @relation("ImpactAreaToRatingCategory")
}

model InstitutionRatingCategory {
  id                Int                      @id @default(autoincrement())
  keyword           String                   @unique
  name              String
  icon              String
  description       String
  weight            Int
  examples          String[]
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  status            Boolean                  @default(true)
  rankHistory       InstitutionRankHistory[]
  InstitutionRating InstitutionRating[]
  departments       Department[]             @relation("DepartmentToInstitutionRatingCategory")
  impactAreas       ImpactArea[]             @relation("ImpactAreaToInstitutionRatingCategory")
}

model NomineeRankHistory {
  id         Int             @id @default(autoincrement())
  nomineeId  Int
  rank       Int
  date       DateTime        @default(now())
  categoryId Int?
  category   RatingCategory? @relation(fields: [categoryId], references: [id])
  nominee    Nominee         @relation(fields: [nomineeId], references: [id])
}

model InstitutionRankHistory {
  id            Int                        @id @default(autoincrement())
  institutionId Int
  rank          Int
  date          DateTime                   @default(now())
  categoryId    Int?
  category      InstitutionRatingCategory? @relation(fields: [categoryId], references: [id])
  institution   Institution                @relation(fields: [institutionId], references: [id])
}

model Comment {
  id            Int               @id @default(autoincrement())
  content       String
  userId        Int
  nomineeId     Int?
  institutionId Int?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  status        Boolean           @default(true)
  institution   Institution?      @relation(fields: [institutionId], references: [id])
  nominee       Nominee?          @relation(fields: [nomineeId], references: [id])
  user          User              @relation(fields: [userId], references: [id])
  reactions     CommentReaction[]
  replies       CommentReply[]
}

model CommentReply {
  id        Int               @id @default(autoincrement())
  content   String
  userId    Int
  commentId Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  reactions CommentReaction[]
  comment   Comment           @relation(fields: [commentId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
}

model CommentReaction {
  id        Int           @id @default(autoincrement())
  userId    Int
  commentId Int?
  replyId   Int?
  isLike    Boolean
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  comment   Comment?      @relation(fields: [commentId], references: [id])
  reply     CommentReply? @relation(fields: [replyId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@unique([userId, replyId])
  @@unique([userId, commentId])
}

model Evidence {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  fileUrl       String?
  status        EvidenceStatus @default(PENDING)
  verifiedAt    DateTime?
  verifiedBy    Int?
  userId        Int
  nomineeId     Int?
  institutionId Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  institution   Institution?   @relation(fields: [institutionId], references: [id])
  nominee       Nominee?       @relation(fields: [nomineeId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  verifier      User?          @relation("EvidenceVerifier", fields: [verifiedBy], references: [id])

  @@index([status])
  @@index([userId])
  @@index([nomineeId])
  @@index([institutionId])
}

model Scandal {
  id            Int          @id @default(autoincrement())
  title         String
  description   String
  sourceUrl     String?
  nomineeId     Int?
  institutionId Int?
  verified      Boolean      @default(false)
  createdBy     Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  author        User         @relation(fields: [createdBy], references: [id])
  institution   Institution? @relation(fields: [institutionId], references: [id])
  nominee       Nominee?     @relation(fields: [nomineeId], references: [id])

  @@index([nomineeId])
  @@index([institutionId])
  @@index([createdBy])
}

model Blog {
  id         Int         @id @default(autoincrement())
  title      String
  slug       String      @unique
  content    String
  excerpt    String
  featured   Boolean     @default(false)
  image      String?
  authorId   Int
  categoryId Int?
  tags       String[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  status     Boolean     @default(true)
  User       User        @relation(fields: [authorId], references: [id])
  Department Department? @relation(fields: [categoryId], references: [id])

  @@index([authorId])
  @@index([categoryId])
  @@index([featured])
}

enum UserRole {
  USER
  ADMIN
}

enum Severity {
  Minor       @map("1")
  Moderate    @map("2")
  Significant @map("3")
  Severe      @map("4")
  Critical    @map("5")
}

enum EvidenceStatus {
  PENDING
  VERIFIED
  REJECTED
  FLAGGED
}
